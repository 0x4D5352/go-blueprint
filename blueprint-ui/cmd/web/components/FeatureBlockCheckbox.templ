package components

type FeatureBlockCheckboxProps struct {
	Title          string
	FeatureOptions []FeatureTuple
	GroupName      string
}

templ FeatureBlockCheckbox(props FeatureBlockProps) {
    <div class="w-full">
        <div class="px-4 py-5">
            <h3 class="text-base font-semibold leading-6 text-gray-900">
                { props.Title }
            </h3>
            <div class="mt-2 max-w-xl text-sm text-gray-500 space-y-1">
                for _, feature := range props.FeatureOptions {
                    <div>
                        <label class="flex items-start">
                            <input
                                type="checkbox"
                                name={ props.GroupName }
                                value={ feature.Key }
                                class="mr-2 mt-1"
                                hx-post="/update_structure"
                                hx-target="#results"
                                if feature.Key == "htmx" || feature.Key == "react" {
                                    data-tech-checkbox={ feature.Key }
                                }
                                if feature.Key == "tailwind" {
                                    onclick="handleTailwindSelection(this)"
                                }
                                if feature.Key == "htmx" || feature.Key == "react" {
                                    onclick="handleTechSelection(this)"
                                }
                            />
                            { feature.Value }
                        </label>
                    </div>
                }
            </div>
        </div>
    </div>
    <script>
        function handleTechSelection(checkbox) {
            if (checkbox.checked) {
                const techType = checkbox.getAttribute('data-tech-checkbox');
                const otherTech = techType === 'react' ? 'htmx' : 'react';
                const otherCheckbox = document.querySelector(`[data-tech-checkbox="${otherTech}"]`);
                if (otherCheckbox) {
                    otherCheckbox.checked = false;
                }
            }
        }

        function handleTailwindSelection(checkbox) {
            if (checkbox.checked) {
                const reactCheckbox = document.querySelector('[data-tech-checkbox="react"]');
                const htmxCheckbox = document.querySelector('[data-tech-checkbox="htmx"]');
                if (reactCheckbox && !reactCheckbox.checked) {
                    htmxCheckbox.checked = true;
                }
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            const reactCheckbox = document.querySelector('[data-tech-checkbox="react"]');
            if (reactCheckbox) {
                reactCheckbox.addEventListener('change', function() {
                    const tailwindCheckbox = document.querySelector('[value="tailwind"]');
                    const htmxCheckbox = document.querySelector('[data-tech-checkbox="htmx"]');
                    if (this.checked && tailwindCheckbox && tailwindCheckbox.checked) {
                        if (htmxCheckbox) {
                            htmxCheckbox.checked = false;
                        }
                    }
                });
            }
        });
    </script>
}
